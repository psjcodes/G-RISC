# C0 = 61       1000
# C1 = 64       1001   
# C2 = 8        
# C3 = 65

# L0 = 0
# L1 = 0
# L2 = 0

# data_mem[64] = 16
# data_mem[65] = 0


LOOPi:
    LOOPj:
        MOV L1, L0                  
        INC L1                      
        INC L1                  # j = i + 2
        LDR R1, L0              # R1 = data_mem[i]
        LDR R2, L1              # R2 = data_mem[j]
        XOR R1, R2              # diff = data_mem[i] XOR data_mem[j]
        AND L2, 0b00            # k = 0
        LOOPk_1:
            MOV R3, R1          # R3 = diff
            AND R3, 0b01        # diff & 1
            ADD R0, R3          # distance += diff & 1
            INC L2              # k++
            CMP L2, C2          # while (k < 8)
            BLT LOOPk_1
        INC L0                  # i++
        INC L1                  # j++
        LDR R1, L0              # R1 = data_mem[i + 1]
        LDR R2, L1              # R2 = data_mem[j + 1]
        XOR R1, R2              # diff = data_mem[i + 1] XOR data_mem[j + 1]
        AND L2, 0b00            # k = 0
        LOOPk_2:
            MOV R3, R1          # R3 = diff
            AND R3, 0b01        # diff & 1
            ADD R0, R3          # distance += diff & 1
            INC L2              # k++
            CMP L2, C2          # while (k < 8)
            BLT LOOPk_2
        LDR R3, C1              # R3 = data_mem[64] (minDistance)
        CMP R0, R3              # if distance < minDistance
        BLT UPDATE_MIN
        LDR R3, C3              # R3 = data_mem[65] (maxDistance)
        CMP R3, R0              # if maxDistance < distance
        BLT UPDATE_MAX
        UPDATE_MIN:
            STR R0, C1          # minDistance = distance
            AND R0, 0b00        # distance = 0
            CMP R0, 0b00
            BEQ NEXT_PAIR
        UPDATE_MAX:
            STR R0, C3          # maxDistance = distance
            AND R0, 0b00        # distance = 0
            CMP R0, 0b00
            BEQ NEXT_PAIR
        NEXT_PAIR:
            CMP L1, C1           # while (j < 64)
            BLT LOOPj
    INC L0                       # i++                     
    CMP L0, C0                   # while (i < 64)                
    BLT LOOPi
